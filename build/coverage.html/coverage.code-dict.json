{"/home/travis/build/npmtest/node-npmtest-maildev/test.js":"/* istanbul instrument in package npmtest_maildev */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-maildev/lib.npmtest_maildev.js":"/* istanbul instrument in package npmtest_maildev */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_maildev = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_maildev = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-maildev/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-maildev && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_maildev */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_maildev\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_maildev.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_maildev.rollup.js'] =\n            local.assetsDict['/assets.npmtest_maildev.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_maildev.__dirname + '/lib.npmtest_maildev.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-maildev/node_modules/maildev/index.js":"\n/**\n * MailDev - index.js\n *\n * Author: Dan Farrelly <daniel.j.farrelly@gmail.com>\n * Licensed under the MIT License.\n */\n\nvar program = require('commander');\nvar async = require('async');\nvar pkg = require('./package.json');\nvar web = require('./lib/web');\nvar mailserver = require('./lib/mailserver');\nvar logger = require('./lib/logger');\n\n\nmodule.exports = function(config) {\n\n  var version = pkg.version;\n\n  if (!config) {\n    // CLI\n    config = program\n      .version(version)\n      .option('-s, --smtp <port>', 'SMTP port to catch emails [1025]', '1025')\n      .option('-w, --web <port>', 'Port to run the Web GUI [1080]', '1080')\n      .option('--ip <ip address>', 'IP Address to bind SMTP service to', '0.0.0.0')\n      .option('--outgoing-host <host>', 'SMTP host for outgoing emails')\n      .option('--outgoing-port <port>', 'SMTP port for outgoing emails')\n      .option('--outgoing-user <user>', 'SMTP user for outgoing emails')\n      .option('--outgoing-pass <password>', 'SMTP password for outgoing emails')\n      .option('--outgoing-secure', 'Use SMTP SSL for outgoing emails')\n      .option('--auto-relay', 'Use auto-relay mode')\n      .option('--auto-relay-rules <file>', 'Filter rules for auto relay mode')\n      .option('--incoming-user <user>', 'SMTP user for incoming emails')\n      .option('--incoming-pass <pass>', 'SMTP password for incoming emails')\n      .option('--web-ip <ip address>', 'IP Address to bind HTTP service to, defaults to --ip')\n      .option('--web-user <user>', 'HTTP user for GUI')\n      .option('--web-pass <password>', 'HTTP password for GUI')\n      .option('--base-pathname <path>', 'base path for URLs')\n      .option('-o, --open', 'Open the Web GUI after startup')\n      .option('-v, --verbose')\n      .option('--silent')\n      .parse(process.argv);\n  }\n\n  if (config.verbose) {\n    logger.setLevel(2);\n  } else if (config.silent) {\n    logger.setLevel(0);\n  }\n\n  // Start the Mailserver & Web GUI\n  mailserver.create(config.smtp, config.ip, config.incomingUser, config.incomingPass);\n\n  if (config.outgoingHost ||\n      config.outgoingPort ||\n      config.outgoingUser ||\n      config.outgoingPass ||\n      config.outgoingSecure) {\n\n    mailserver.setupOutgoing(\n      config.outgoingHost,\n      parseInt(config.outgoingPort),\n      config.outgoingUser,\n      config.outgoingPass,\n      config.outgoingSecure\n    );\n  }\n\n  if (config.autoRelay){\n    mailserver.setAutoRelayMode(true, config.autoRelayRules);\n  }\n\n  // Default to run on same IP as smtp\n  var webIp = config.webIp ? config.webIp : config.ip;\n  web.start(config.web, webIp, mailserver, config.webUser, config.webPass, config.basePathname);\n\n  if (config.open){\n    var open = require('open');\n    open('http://' + (config.ip === '0.0.0.0' ? 'localhost' : config.ip) + ':' + config.web);\n  }\n\n  process.on('SIGTERM', function () {\n    async.parallel([\n      mailserver.end,\n      web.close\n    ], function(err, results) {\n      logger.info('Shutting down...');\n      process.exit(0);\n    });\n  });\n\n  return mailserver;\n};\n","/home/travis/build/npmtest/node-npmtest-maildev/node_modules/maildev/lib/web.js":"\n/**\n * MailDev - web.js\n */\n\nvar express = require('express');\nvar app = express();\nvar server = require('http').createServer(app);\nvar io = require('socket.io')();\nvar routes = require('./routes');\nvar auth = require('./auth');\nvar logger = require('./logger');\nvar path = require('path');\n\n/**\n * WebSockets\n */\n\nfunction emitNewMail(socket) {\n  return function(email) {\n    socket.emit('newMail', email);\n  };\n}\n\nfunction emitDeleteMail(socket) {\n  return function(email) {\n    socket.emit('deleteMail', email);\n  };\n}\n\nfunction webSocketConnection(mailserver) {\n\n  return function onConnection(socket) {\n\n    // When a new email arrives, the 'new' event will be emitted\n    mailserver.on('new', emitNewMail(socket));\n    mailserver.on('delete', emitDeleteMail(socket));\n\n    socket.on('disconnect', function(){\n      mailserver.removeListener('new', emitNewMail(socket));\n      mailserver.removeListener('delete', emitDeleteMail(socket));\n    });\n\n  };\n}\n\n/**\n * Start the web server\n */\n\nmodule.exports.start = function(port, host, mailserver, user, password, basePathname) {\n\n  if (user && password) {\n    app.use(auth(user, password));\n  }\n\n  if (basePathname) {\n    io.path(basePathname + '/socket.io');\n  } else {\n    basePathname = '/';\n  }\n\n  app.use(basePathname, express.static(path.join(__dirname, '../app')));\n\n  routes(app, mailserver, basePathname);\n\n  io.attach(server);\n  io.on('connection', webSocketConnection(mailserver));\n\n  port = port || 1080;\n  host = host || '0.0.0.0';\n\n  server.listen(port, host);\n\n  logger.info('MailDev app running at %s:%s', host, port);\n\n};\n\nmodule.exports.close = function(callback) {\n  server.close(callback);\n};\n","/home/travis/build/npmtest/node-npmtest-maildev/node_modules/maildev/lib/routes.js":"\n/**\n * MailDev - routes.js\n */\nvar express = require('express');\nvar pkg = require('../package.json');\n\nvar emailRegexp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nmodule.exports = function(app, mailserver, basePathname) {\n  var router = express.Router();\n\n  // Get all emails\n  router.get('/email', function(req, res){\n\n    mailserver.getAllEmail(function(err, emailList){\n      if (err) return res.status(404).json([]);\n\n      res.json(emailList);\n    });\n\n  });\n\n  // Get single email\n  router.get('/email/:id', function(req, res){\n\n    mailserver.getEmail( req.params.id, function(err, email){\n      if (err) return res.status(404).json({ error: err.message });\n\n       // Mark the email as 'read'\n      email.read = true;\n\n      res.json(email);\n    });\n\n  });\n\n  // Delete all emails\n  router.delete('/email/all', function(req, res){\n\n    mailserver.deleteAllEmail(function(err){\n      if (err) return res.status(500).json({ error: err.message });\n\n      res.json(true);\n    });\n\n  });\n\n  // Delete email by id\n  router.delete('/email/:id', function(req, res){\n\n    mailserver.deleteEmail(req.params.id, function(err){\n      if (err) return res.status(500).json({ error: err.message });\n\n      res.json(true);\n    });\n\n  });\n\n  // Get Email HTML\n  router.get('/email/:id/html', function(req, res){\n\n    // Use the headers over hostname to include any port\n    var baseUrl = req.headers.host + (req.baseUrl || '');\n\n    mailserver.getEmailHTML(req.params.id, baseUrl, function(err, html){\n      if (err) return res.status(404).json({ error: err.message });\n\n      res.send(html);\n    });\n\n  });\n\n  // Serve Attachments\n  router.get('/email/:id/attachment/:filename', function(req, res){\n\n    mailserver.getEmailAttachment(req.params.id, req.params.filename, function(err, contentType, readStream){\n      if (err) return res.status(404).json('File not found');\n\n      res.contentType(contentType);\n      readStream.pipe(res);\n    });\n\n  });\n\n  // Serve email.eml\n  router.get('/email/:id/download', function(req, res){\n\n    mailserver.getEmailEml(req.params.id, function(err, contentType, filename, readStream){\n      if (err) return res.status(404).json('File not found');\n\n      res.setHeader('Content-disposition', 'attachment; filename=' + filename);\n      res.contentType(contentType);\n      readStream.pipe(res);\n    });\n\n  });\n\n  // Get email source from .eml file\n  router.get('/email/:id/source', function(req, res){\n\n    mailserver.getRawEmail( req.params.id, function(err, readStream){\n\n      if (err) return res.status(404).json('File not found');\n      readStream.pipe(res);\n    });\n\n  });\n\n  // Get any config settings for display\n  router.get('/config', function(req, res){\n\n    res.json({\n      version:  pkg.version,\n      smtpPort: mailserver.port,\n      isOutgoingEnabled: mailserver.isOutgoingEnabled(),\n      outgoingHost: mailserver.getOutgoingHost()\n    });\n\n  });\n\n  // Relay the email\n  router.post('/email/:id/relay/:relayTo?', function(req, res){\n    mailserver.getEmail(req.params.id, function(err, email){\n      if (err) return res.status(404).json({ error: err.message });\n\n      if (req.params.relayTo) {\n        if (emailRegexp.test(req.params.relayTo)) {\n          email.to = [{address: req.params.relayTo}];\n          email.envelope.to = [ { address: req.params.relayTo, args: false }]\n        }\n        else {\n          return res.status(400).json({ error: 'Incorrect email address provided :' + req.params.relayTo });\n        }\n      }\n\n      mailserver.relayMail(email, function(err) {\n        if (err) return res.status(500).json({ error: err.message });\n\n        res.json(true);\n      });\n\n    });\n  });\n\n  app.use(basePathname, router);\n};\n","/home/travis/build/npmtest/node-npmtest-maildev/node_modules/maildev/lib/auth.js":"\n/**\n * MailDev - auth.js\n */\n\nmodule.exports = function(user, password) {\n\n  return function(req, res, next) {\n    var auth;\n    if (req.headers.authorization) {\n      auth = new Buffer(req.headers.authorization.substring(6), 'base64').toString().split(':');\n    }\n\n    if (!auth || auth[0] !== user || auth[1] !== password) {\n      res.statusCode = 401;\n      res.setHeader('WWW-Authenticate', 'Basic realm=\"Authentication required\"');\n      res.send('Unauthorized');\n    } else {\n      next();\n    }\n  };\n\n};","/home/travis/build/npmtest/node-npmtest-maildev/node_modules/maildev/lib/logger.js":"\n/**\n * MailDev - logger.js\n */\n\nvar logLevel = 1;\n\nmodule.exports = {};\n\n\n/**\n * Initialize the logger\n */\n\nmodule.exports.setLevel = function(level) {\n  logLevel = level;\n};\n\n/**\n * The info method will always log to the console\n */\n\nmodule.exports.info = function() {\n  if (logLevel > 0)\n    console.info.apply(console, arguments);\n};\n\n\n/**\n * Extend the basic console.x functions, checking if the logging is on\n */\n\n['log', 'dir', 'warn', 'error'].forEach(function(fn){\n\n  module.exports[ fn ] = function(){\n    if (logLevel > 1) {\n      console[ fn ].apply(console, arguments);\n    }\n  };\n\n});\n","/home/travis/build/npmtest/node-npmtest-maildev/node_modules/maildev/lib/mailserver.js":"\n/**\n * MailDev - mailserver.js\n */\n\n// NOTE - simplesmtp is for backwards compatibility with 0.10.x\nvar simplesmtp = require('simplesmtp');\nvar SMTPServer = require('smtp-server').SMTPServer;\nvar MailParser = require('mailparser').MailParser;\nvar events = require('events');\nvar fs = require('fs');\nvar os = require('os');\nvar path = require('path');\nvar logger = require('./logger');\nvar outgoing = require('./outgoing');\n\n\nvar version = process.version.replace(/v/, '')\n                             .split(/\\./)\n                             .map(function(n) { return parseInt(n, 10); });\nvar legacy = version[0] === 0 && version[1] <= 10;\nvar defaultPort = 1025;\nvar defaultHost = '0.0.0.0';\nvar config = {};\nvar store = [];\nvar tempDir = path.join(os.tmpdir(), 'maildev', process.pid.toString());\nvar eventEmitter = new events.EventEmitter();\nvar smtp;\n\n\n/**\n * Mail Server exports\n */\n\nvar mailServer = module.exports = {};\n\nmailServer.store = store;\n\n\n/**\n * SMTP Server stream and helper functions\n */\n\n// Clone object\nfunction clone(object){\n  return JSON.parse(JSON.stringify(object));\n}\n\n// Create an unique id, length 8 characters\nfunction makeId(){\n  var text = '';\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  for (var i = 0; i < 8; i++){\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n\n// Save an email object on stream end\nfunction saveEmail(id, envelope, mailObject){\n  \n  // remove stream object from attachments (fix the JSON.stringify)\n  if (mailObject.attachments instanceof Array) {\n    mailObject.attachments.forEach(function(attachment) {\n      delete attachment.stream;\n    });\n  }\n\n  var object = clone(mailObject);\n\n  object.id = id;\n  object.time = new Date();\n  object.read = false;\n  object.envelope = envelope;\n  object.source = path.join(tempDir, id + '.eml');\n\n  store.push(object);\n\n  logger.log('Saving email: ', mailObject.subject);\n\n  if (outgoing.isAutoRelayEnabled()) {\n    mailServer.relayMail(object, true, function (err) {\n      if (err) logger.error('Error when relaying email', err);\n    });\n  }\n\n  eventEmitter.emit('new', object);\n}\n\n// Save an attachment\nfunction saveAttachment(attachment){\n  var output = fs.createWriteStream(path.join(tempDir, attachment.contentId));\n  attachment.stream.pipe(output);\n}\n\nfunction createSaveStream(id, emailData) {\n  var parseStream = new MailParser({\n    streamAttachments: true\n  });\n  parseStream.on('end', saveEmail.bind(null, id, emailData));\n  parseStream.on('attachment', saveAttachment);\n  return parseStream;\n}\n\nfunction createRawStream(id) {\n  return fs.createWriteStream(path.join(tempDir, id + '.eml'));\n}\n\n// Legacy methods are used with the Node 0.10 compatible smtpserver\nfunction handleLegacyDataStream(connection) {\n  var id = makeId();\n\n  connection.saveStream = createSaveStream(id, {\n    from: connection.from,\n    to: connection.to,\n    host: connection.host,\n    remoteAddress: connection.remoteAddress\n  });\n\n  connection.saveRawStream = createRawStream(id);\n}\n\nfunction handleLegacyChunk(connection, chunk) {\n  connection.saveStream.write(chunk);\n  connection.saveRawStream.write(chunk);\n}\n\nfunction handleLegacyDataStreamEnd(connection, done) {\n  connection.saveStream.end();\n  connection.saveRawStream.end();\n  // ABC is the queue id to be advertised to the client\n  // There is no current significance to this.\n  done(null, 'ABC');\n}\n\nfunction handleDataStream(stream, session, callback) {\n  var id = makeId();\n\n  session.saveStream = createSaveStream(id, {\n    from: session.envelope.mailFrom,\n    to: session.envelope.rcptTo,\n    host: session.hostNameAppearsAs,\n    remoteAddress: session.remoteAddress\n  });\n\n  session.saveRawStream = createRawStream(id);\n\n  stream.pipe(session.saveStream);\n  stream.pipe(session.saveRawStream);\n\n  stream.on('end', function(){\n    session.saveRawStream.end();\n    callback(null, 'Message queued as ' + id);\n  });\n}\n\n\n/**\n * Delete everything in the temp folder\n */\n\nfunction clearTempFolder(){\n\n  fs.readdir(tempDir, function(err, files){\n    if (err) throw err;\n\n    files.forEach(function(file){\n      fs.unlink( path.join(tempDir, file), function(err) {\n        if (err) throw err;\n      });\n    });\n  });\n}\n\n\n/**\n * Delete a single email's attachments\n */\n\nfunction deleteAttachments(attachments) {\n\n  attachments.forEach(function(attachment){\n    fs.unlink( path.join(tempDir, attachment.contentId), function (err) {\n      if (err) logger.error(err);\n    });\n  });\n}\n\n\n/**\n * Create temp folder\n */\n\nfunction createTempFolder() {\n\n  if (fs.existsSync(tempDir)) {\n    clearTempFolder();\n    return;\n  }\n\n  if (!fs.existsSync(path.dirname(tempDir))) {\n    fs.mkdirSync(path.dirname(tempDir));\n    logger.log('Temporary directory created at %s', path.dirname(tempDir));\n  }\n\n  if (!fs.existsSync(tempDir)) {\n    fs.mkdirSync(tempDir);\n    logger.log('Temporary directory created at %s', tempDir);\n  }\n}\n\n/**\n * Authorize callback for smtp server\n */\n\nfunction authorizeUser(auth, session, callback) {\n  var username = auth.username;\n  var password = auth.password;\n\n  // conn, username, password, callback\n  if (legacy) {\n    username = arguments[1];\n    password = arguments[2];\n    callback = arguments[3];\n  }\n\n  if (this.options.incomingUser && this.options.incomingPassword) {\n    if (username !== this.options.incomingUser ||\n        password !== this.options.incomingPassword) {\n      return callback(new Error('Invalid username or password'));\n    }\n  }\n  callback(null, { user: this.options.incomingUser });\n}\n\n\n/**\n * Create and configure the mailserver\n */\n\nmailServer.create = function(port, host, user, password) {\n\n  // Start the server & Disable DNS checking\n  if (legacy) {\n    smtp = simplesmtp.createServer({\n      disableDNSValidation: true,\n      requireAuthentication: !!(user && password),\n      incomingUser: user,\n      incomingPassword: password\n    });\n\n    smtp.on('startData', handleLegacyDataStream);\n    smtp.on('data',      handleLegacyChunk);\n    smtp.on('dataReady', handleLegacyDataStreamEnd);\n\n    if (user && password) {\n      smtp.on('authorizeUser', authorizeUser);\n    }\n  } else {\n    smtp = new SMTPServer({\n      incomingUser: user,\n      incomingPassword: password,\n      onAuth: authorizeUser,\n      onData: handleDataStream,\n      logger: false,\n      disabledCommands: !!(user && password)?['STARTTLS']:['AUTH']\n    });\n  }\n\n  // Setup temp folder for attachments\n  createTempFolder();\n\n  mailServer.port = port || defaultPort;\n  mailServer.host = host || defaultHost;\n};\n\n\n/**\n * Start the mailServer\n */\n\nmailServer.listen = function(callback) {\n\n  if (typeof callback !== 'function') callback = null;\n\n  // Listen on the specified port\n  smtp.listen(mailServer.port, mailServer.host, function(err) {\n    if (err) {\n      if (callback) {\n        callback(err);\n      } else {\n        throw err;\n      }\n    }\n\n    if (callback) callback();\n\n    logger.info('MailDev SMTP Server running at %s:%s', mailServer.host, mailServer.port);\n  });\n};\n\n\n/**\n * Stop the mailserver\n */\n\nmailServer.end = function(callback) {\n  var method = legacy ? 'end' : 'close';\n  smtp[method](callback);\n  outgoing.close();\n};\n\n\n/**\n * Extend Event Emitter methods\n * events:\n *   'new' - emitted when new email has arrived\n */\n\nmailServer.on                 = eventEmitter.on.bind(eventEmitter);\nmailServer.emit               = eventEmitter.emit.bind(eventEmitter);\nmailServer.removeListener     = eventEmitter.removeListener.bind(eventEmitter);\nmailServer.removeAllListeners = eventEmitter.removeAllListeners.bind(eventEmitter);\n\n\n/**\n * Get an email by id\n */\n\nmailServer.getEmail = function(id, done){\n\n  var email = store.filter(function(element){\n    return element.id === id;\n  })[0];\n\n  if (email) {\n    done(null, email);\n  } else {\n    done(new Error('Email was not found'));\n  }\n};\n\n/**\n * Returns a readable stream of the raw email\n */\n\nmailServer.getRawEmail = function(id, done){\n\n  mailServer.getEmail(id, function(err, email){\n    if (err) return done(err);\n\n    done(null, fs.createReadStream( path.join(tempDir, id + '.eml') ) );\n  });\n};\n\n/**\n * Returns the html of a given email\n */\n\nmailServer.getEmailHTML = function(id, baseUrl, done) {\n\n  if (!done && typeof baseUrl === 'function') {\n    done = baseUrl;\n    baseUrl = null;\n  }\n\n  if (baseUrl)\n    baseUrl = '//' + baseUrl;\n\n  mailServer.getEmail(id, function(err, email) {\n    if (err) return done(err);\n\n    var html = email.html;\n\n    if (!email.attachments)\n      return done(null, html);\n\n    var embeddedAttachments = email.attachments.filter(function(attachment) {\n      return attachment.contentId;\n    });\n\n    var getFileUrl = function(id, baseUrl, filename) {\n      return (baseUrl || '') + '/email/' + id + '/attachment/' + filename;\n    };\n\n    if (embeddedAttachments.length) {\n      embeddedAttachments.forEach(function(attachment) {\n        var regex = new RegExp('src=(\"|\\')cid:' + attachment.contentId  + '(\"|\\')', 'g');\n        var replacement = 'src=\"' + getFileUrl(id, baseUrl, attachment.generatedFileName) + '\"';\n        html = html.replace(regex, replacement);\n      });\n    }\n\n    done(null, html);\n  });\n};\n\n/**\n * Get all email\n */\n\nmailServer.getAllEmail = function(done){\n  done(null, store);\n};\n\n\n/**\n * Delete an email by id\n */\n\nmailServer.deleteEmail = function(id, done){\n  var email      = null;\n  var emailIndex = null;\n\n  store.forEach(function(element, index){\n    if (element.id === id){\n      email = element;\n      emailIndex = index;\n    }\n  });\n\n  if (emailIndex === null){\n    return done(new Error('Email not found'));\n  }\n\n  //delete raw email\n  fs.unlink( path.join(tempDir, id + '.eml'), function (err) {\n    if (err) {\n      logger.error(err);\n    } else {\n      eventEmitter.emit('delete', {id:id, index:emailIndex});\n    }\n  });\n\n  if (email.attachments){\n    deleteAttachments(email.attachments);\n  }\n\n  logger.warn('Deleting email - %s', email.subject);\n\n  store.splice(emailIndex, 1);\n\n  done(null, true);\n};\n\n\n/**\n * Delete all emails in the store\n */\n\nmailServer.deleteAllEmail = function(done){\n\n  logger.warn('Deleting all email');\n\n  clearTempFolder();\n  store.length = 0;\n  eventEmitter.emit('delete', {id:'all'});\n\n  done(null, true);\n};\n\n\n/**\n * Returns the content type and a readable stream of the file\n */\n\nmailServer.getEmailAttachment = function(id, filename, done){\n\n  mailServer.getEmail(id, function(err, email){\n    if (err) return done(err);\n\n    if (!email.attachments || !email.attachments.length) {\n      return done(new Error('Email has no attachments'));\n    }\n\n    var match = email.attachments.filter(function(attachment){\n      return attachment.generatedFileName === filename;\n    })[0];\n\n    if (!match) {\n      return done(new Error('Attachment not found'));\n    }\n\n    done(null, match.contentType, fs.createReadStream( path.join(tempDir, match.contentId) ) );\n\n  });\n\n};\n\n/**\n * Setup outgoing\n */\nmailServer.setupOutgoing = function(host, port, user, pass, secure) {\n  outgoing.setup(host, port, user, pass, secure);\n};\n\nmailServer.isOutgoingEnabled = function() {\n  return outgoing.isEnabled();\n};\n\nmailServer.getOutgoingHost = function() {\n  return outgoing.getOutgoingHost();\n};\n\n\n/**\n * Set Auto Relay Mode, automatic send email to recipient\n */\n\nmailServer.setAutoRelayMode = function(enabled, rules) {\n  outgoing.setAutoRelayMode(enabled, rules);\n};\n\n/**\n * Relay a given email, accepts a mail id or a mail object\n */\n\nmailServer.relayMail = function(idOrMailObject, isAutoRelay, done) {\n\n  if (!outgoing.isEnabled())\n    return done(new Error('Outgoing mail not configured'));\n\n  // isAutoRelay is an option argument\n  if (typeof isAutoRelay === 'function') {\n    done = isAutoRelay;\n    isAutoRelay = false;\n  }\n\n  // If we receive a email id, get the email object\n  if (typeof idOrMailObject === 'string') {\n    mailServer.getEmail(idOrMailObject, function(err, email) {\n      if (err) return done(err);\n      mailServer.relayMail(email, done);\n    });\n    return;\n  }\n\n  var mail = idOrMailObject;\n\n  mailServer.getRawEmail(mail.id, function(err, rawEmailStream) {\n    if (err) {\n      logger.error('Mail Stream Error: ', err);\n      return done(err);\n    }\n\n    outgoing.relayMail(mail, rawEmailStream, isAutoRelay, done);\n  });\n};\n\n/**\n * Download a given email\n */\nmailServer.getEmailEml = function(id, done) {\n  mailServer.getEmail(id, function(err, email){\n    if (err) return done(err);\n\n    var filename = email.id + '.eml';\n\n    done(null, 'message/rfc822', filename, fs.createReadStream(path.join(tempDir, id + '.eml')));\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-maildev/node_modules/maildev/lib/outgoing.js":"\n/**\n * MailDev - outgoing.js\n */\n\nvar SMTPConnection = require('smtp-connection');\nvar wildstring = require('wildstring');\nvar async = require('async');\nvar fs = require('fs');\nvar logger = require('./logger');\n\nwildstring.caseSensitive = false;\n\nvar config = {\n  autoRelay: false\n};\n\n// The SMTP connection client\nvar client;\nvar emailQueue;\n\n/**\n * Outgoing exports\n */\n\nvar outgoing = module.exports = {};\n\noutgoing.setup = function(host, port, user, pass, secure) {\n\n  //defaults\n  port = port || (secure ? 465 : 25);\n  host = host || 'localhost';\n  secure = secure || false;\n\n  config.host = host;\n  config.port = port;\n  config.user = user;\n  config.pass = pass;\n  config.secure = secure;\n\n  this._createClient();\n\n  // Create a queue to sent out the emails\n  // We use a queue so we don't run into concurrency issues\n  emailQueue = async.queue(relayWorker, 1);\n};\n\noutgoing._createClient = function() {\n  try {\n    client = new SMTPConnection({\n      port: config.port,\n      host: config.host,\n      secure: config.secure,\n      auth: (config.pass && config.user) ?\n            { user: config.user, pass: config.pass } :\n            false,\n      tls: { rejectUnauthorized: false },\n      debug: true\n    });\n\n    logger.info(\n      'MailDev outgoing SMTP Server %s:%d (user:%s, pass:%s, secure:%s)',\n      config.host,\n      config.port,\n      config.user,\n      config.pass ? '####' : config.pass,\n      config.secure ? 'yes' : 'no'\n    );\n  } catch (err){\n    logger.error('Error during configuration of SMTP Server for outgoing email', err);\n  }\n};\n\noutgoing.close = function() {\n  if (this.isEnabled())\n    client.close();\n};\n\noutgoing.isEnabled = function() {\n  return !!client;\n};\n\noutgoing.getOutgoingHost = function() {\n  return config.host;\n};\n\noutgoing.isAutoRelayEnabled = function() {\n  return config.autoRelay;\n};\n\noutgoing.setAutoRelayMode = function(enabled, rules) {\n\n  if (!client){\n    config.autoRelay = false;\n    logger.info('Outgoing mail not configured - Auto relay mode ignored');\n    return;\n  }\n\n  if (rules) {\n\n    if (typeof rules === 'string') {\n      try {\n        rules = JSON.parse(fs.readFileSync(rules, 'utf8'));\n      } catch (err) {\n        logger.error('Error reading config file at ' + rules);\n        throw err;\n      }\n    }\n\n    if (Array.isArray(rules)) {\n      config.autoRelayRules = rules;\n    }\n  }\n\n  config.autoRelay = enabled;\n\n  if (config.autoRelay) {\n    logger.info(\n      'Auto-Relay mode on, relay rules: %s',\n      JSON.stringify(config.autoRelayRules)\n    );\n  }\n};\n\n\noutgoing.relayMail = function(emailObject, emailStream, isAutoRelay, callback) {\n  emailQueue.push({\n    emailObject: emailObject,\n    emailStream: emailStream,\n    isAutoRelay: isAutoRelay,\n    callback: callback\n  });\n};\n\n\nfunction relayMail(emailObject, emailStream, isAutoRelay, done) {\n\n  if (!client)\n    return done(new Error('Outgoing mail not configured'));\n\n  // Fallback to the object if the address key isn't defined\n  var getAddress = function(addressObj) {\n    return typeof addressObj.address !== 'undefined' ? addressObj.address : addressObj;\n  };\n\n  var mailSendCallback = function(err) {\n    if (err) {\n      logger.error('Outgoing client login error: ', err);\n      return done(err);\n    }\n\n    var recipients = emailObject.envelope.to.map(getAddress);\n    var sender = getAddress(emailObject.envelope.from);\n\n    if (isAutoRelay && config.autoRelayRules) {\n      recipients = getAutoRelayableRecipients(recipients);\n    }\n\n    // Fail silently with auth relay mode on\n    if (recipients.length === 0) {\n      return done('Email had no recipients');\n    }\n\n    client.send({\n      from: sender,\n      to: recipients\n    }, emailStream, function (err) {\n\n      client.quit();\n      outgoing._createClient();\n\n      if (err) {\n        logger.error('Mail Delivery Error: ', err);\n        return done(err);\n      }\n\n      logger.log('Mail Delivered: ', emailObject.subject);\n\n      return done();\n    });\n  };\n\n  var mailConnectCallback = function(err) {\n    if (err) {\n      logger.error('Outgoing connection error: ', err);\n      return done(err);\n    }\n\n    if (client.options.auth) {\n      client.login(client.options.auth, mailSendCallback);\n    } else {\n      mailSendCallback(err);\n    }\n  };\n\n  client.connect(mailConnectCallback);\n}\n\nfunction relayWorker(task, callback) {\n\n  var relayCallback = function(err, result){\n    task.callback && task.callback(err, result);\n    callback(err, result);\n  };\n\n  relayMail(task.emailObject, task.emailStream, task.isAutoRelay, relayCallback);\n}\n\nfunction getAutoRelayableRecipients(recipients) {\n  return recipients.filter(function(email) {\n    return validateAutoRelayRules(email);\n  });\n}\n\nfunction validateAutoRelayRules(email) {\n\n  if (!config.autoRelayRules) {\n    return true;\n  }\n\n  return config.autoRelayRules.reduce(function(result, rule) {\n     var toMatch = rule.allow || rule.deny || '';\n     var isMatch = wildstring.match(toMatch, email);\n\n     // Override previous rule if it matches\n     return isMatch ?\n            (rule.allow ? true : false) :\n            result;\n   }, true);\n}\n","/home/travis/build/npmtest/node-npmtest-maildev/node_modules/maildev/app/scripts/app.js":"/* global angular, io */\n\n/**\n * App Config\n */\n\nvar app = angular.module('mailDevApp', ['ngRoute', 'ngResource',  'ngSanitize', 'ngCookies']);\n\napp.config(['$routeProvider', function($routeProvider){\n\n  $routeProvider\n    .when('/', { templateUrl: 'views/main.html', controller: 'MainCtrl' })\n    .when('/email/:itemId', { templateUrl: 'views/item.html', controller: 'ItemCtrl' })\n    .otherwise({ redirectTo: '/' });\n\n}]);\n\napp.run(['$rootScope', function($rootScope){\n  \n  // Connect Socket.io\n  var socket = io({\n    path: location.pathname + 'socket.io'\n  });\n\n  socket.on('newMail', function(data) {\n    $rootScope.$emit('newMail', data);\n  });\n\n  socket.on('deleteMail', function(data) {\n    $rootScope.$emit('deleteMail', data);\n  });\n  \n  $rootScope.$on('Refresh', function() {\n    console.log('Refresh event called.');\n  });\n\n}]);\n\n/**\n * NewLineFilter -- Converts new line characters to br tags\n */\n\napp.filter('newLines', function() {\n  \n  return function(text) {\n    return text && text.replace(/\\n/g, '<br>') || '';\n  };\n\n});\n\n/**\n * Sidebar scrollbar fixed height\n */\n\n(function(){\n\n  var sidebar             = document.querySelector('.sidebar');\n  var sidebarHeader       = document.querySelector('.sidebar-header');\n  var emailList           = document.querySelector('.email-list');\n  var sidebarHeaderHeight = sidebarHeader.getBoundingClientRect().height;\n  var resizeTimeout       = null;\n\n  function adjustEmailListHeight(){\n    var newEmailListHeight = sidebar.getBoundingClientRect().height - sidebarHeaderHeight;\n    emailList.style.height = newEmailListHeight + 'px';\n  }\n\n  adjustEmailListHeight();\n\n  window.onresize = function(){\n    if (resizeTimeout){\n      clearTimeout(resizeTimeout);\n    }\n    resizeTimeout = window.setTimeout(function(){\n      adjustEmailListHeight();\n      resizeTimeout = null;\n    }, 300);\n  };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-maildev/node_modules/maildev/app/scripts/services.js":"/* global app */\n\n/**\n * Email Resource\n */\n\napp.service('Email', ['$resource', function($resource) {\n  \n  return $resource('email/:id', { id: ''}, {\n    update: {\n      method: 'PUT',\n      params: {}\n    }\n  });\n\n}]);"}